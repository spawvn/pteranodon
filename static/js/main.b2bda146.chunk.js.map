{"version":3,"sources":["Components/CityWeather/index.js","DemoData/hot.js","DemoData/cold.js","App.js","serviceWorker.js","index.js"],"names":["CityWeather","data","name","minTemp","get","maxTemp","extremeTemp","Math","abs","isBelowZero","backdropStyle","opacity","toFixed","className","style","Headline","Text","DailyForecasts","Temperature","Minimum","Value","Maximum","App","statics","weatherEndpoint","weatherParams","apikey","metric","getForecasts","cities","a","setState","isWeatherLoading","weatherData","requests","map","id","getCityForecast","Promise","all","then","catch","error","console","state","userName","demoMode","cityKey","this","cached","localStorage","getItem","JSON","parse","fetch","URLSearchParams","method","response","json","setCityForecast","payload","TimeStamp","moment","setItem","stringify","DemoHot","DemoCold","mode","getWeatherData","key","onClick","setDemo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iWAuCeA,MAnCf,YAA2C,IAApBC,EAAmB,EAAnBA,KAAmB,IAAbC,YAAa,MAAN,GAAM,EAClCC,EAAUC,cAAIH,EAAM,8CAA+C,GACnEI,EAAUD,cAAIH,EAAM,8CAA+C,GAEnEK,EAAcC,KAAKC,IAAIL,GAAWI,KAAKC,IAAIH,GAAWF,EAAUE,EAChEI,EAAcH,EAAc,EAG5BI,EAAgB,CACpBC,SAH0C,IAAxBJ,KAAKC,IAAIF,GAAsB,GAAK,KAAKM,QAAQ,IAMrE,OACE,yBAAKC,UAAU,gBACb,yBACEA,UAAS,iCAA4BJ,EAAc,OAAS,OAC5DK,MAAOJ,IAET,yBACEG,UAAS,yCACPJ,EAAc,OAAS,OAEzBK,MAAOJ,IAERT,GACC,6BAASY,UAAU,mBACjB,yBAAKA,UAAU,aAAaX,GAC5B,yBAAKW,UAAU,oBAAoBP,EAAnC,QACA,yBAAKO,UAAU,iBAAiBZ,EAAKc,SAASC,SChCzC,GACb,OAAU,CACRD,SAAU,CACRC,KACE,0EAEJC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,MAAO,MAETC,QAAS,CACPD,MAAO,UAMjB,OAAU,CACRL,SAAU,CACRC,KAAM,8CAERC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,MAAO,MAETC,QAAS,CACPD,MAAO,UAMjB,OAAU,CACRL,SAAU,CACRC,KAAM,qCAERC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,MAAO,MAETC,QAAS,CACPD,MAAO,WC/CJ,GACb,OAAU,CACRL,SAAU,CACRC,KAAM,0BAERC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,OAAQ,MAEVC,QAAS,CACPD,OAAQ,UAMlB,OAAU,CACRL,SAAU,CACRC,KACE,6FAEJC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,OAAQ,MAEVC,QAAS,CACPD,OAAQ,UAMlB,OAAU,CACRL,SAAU,CACRC,KAAM,sCAERC,eAAgB,CACd,CACEC,YAAa,CACXC,QAAS,CACPC,OAAQ,MAEVC,QAAS,CACPD,OAAQ,WCuFLE,E,kDA9Hb,aAAe,IAAD,8BACZ,gBAeFC,QAAU,CACRC,gBACE,+DACFC,cAAe,CACbC,OAAQ,mCACRC,QAAQ,IArBE,EAyBdC,aAzBc,uCAyBC,WAAMC,GAAN,eAAAC,EAAA,6DACb,EAAKC,SAAS,CACZC,kBAAkB,EAClBC,YAAa,KAGTC,EAAWL,EAAOM,KAAI,YAAa,IAAVC,EAAS,EAATA,GAC7B,OAAO,EAAKC,gBAAgBD,MAPjB,SAUPE,QAAQC,IAAIL,GACfM,MAAK,WACJ,EAAKT,SAAS,CACZC,kBAAkB,OAGrBS,OAAM,SAASC,GACdC,QAAQD,MAAM,iBAAkBA,MAjBvB,2CAzBD,sDAGZ,EAAKE,MAAQ,CACXC,SAAU,QACVhB,OAAQ,CACN,CAAE3B,KAAM,YAAakC,GAAI,QACzB,CAAElC,KAAM,SAAUkC,GAAI,QACtB,CAAElC,KAAM,WAAYkC,GAAI,SAE1BJ,kBAAkB,EAClBC,YAAa,GACba,UAAU,GAZA,E,4DA8CEC,GAAU,IAAD,SACoBC,KAAKzB,QAAxCC,EADe,EACfA,gBAAiBC,EADF,EACEA,cACnBwB,EAASC,aAAaC,QAAb,kBAAgCJ,IAE/C,GAAe,OAAXE,EAAiB,CACnB,IAAMhB,EAAcmB,KAAKC,MAAMJ,GAI/B,OAHAD,KAAKjB,UAAS,WACZ,MAAO,CAAEE,kBAEJA,EAEP,OAAOqB,MAAM,GAAD,OACP9B,GADO,OACWuB,EADX,YACsB,IAAIQ,gBAAgB9B,IACpD,CACE+B,OAAQ,QAGThB,MAAK,SAAAiB,GAAQ,OAAIA,EAASC,UAC1BlB,MAAK,SAAAiB,GACJ,EAAKE,gBAAgBZ,EAASU,Q,sCAKtBV,EAASa,GACvB,IAAM3B,EAAce,KAAKJ,MAAMX,YAC/BA,EAAYc,GAAZ,2BAA4Ba,GAA5B,IAAqCC,UAAWC,QAChDd,KAAKjB,UAAS,WACZ,MAAO,CAAEE,kBAEXiB,aAAaa,QAAb,kBAAgChB,GAAWK,KAAKY,UAAU/B,M,uCAI1D,MAA4B,QAAxBe,KAAKJ,MAAME,SAA2BmB,EACd,SAAxBjB,KAAKJ,MAAME,SAA4BoB,EAC/BlB,KAAKJ,MAAMX,c,8BAGjBkC,GACNnB,KAAKjB,SAAS,CACZe,SAAUqB,M,0CAIO,IACXtC,EAAWmB,KAAKJ,MAAhBf,OACRmB,KAAKpB,aAAaC,K,+BAGV,IAAD,SACsBmB,KAAKJ,MAA1BC,EADD,EACCA,SAAUhB,EADX,EACWA,OACZI,EAAce,KAAKoB,iBAEzB,OACE,yBAAKvD,UAAU,OACb,4BAAQA,UAAU,cAChB,qCACS,0BAAMA,UAAU,YAAYgC,GADrC,IAEE,6BAFF,8CAMF,6BAAShC,UAAU,YAChBgB,EAAOM,KAAI,gBAAGjC,EAAH,EAAGA,KAAMkC,EAAT,EAASA,GAAT,OACV,kBAAC,EAAD,CAAaiC,IAAKjC,EAAIlC,KAAMA,EAAMD,KAAMgC,EAAYG,SAGxD,6BAASvB,UAAU,cACjB,4BAAQyD,QAAS,kBAAM,EAAKC,QAAQ,SAApC,YADF,OAGE,4BAAQD,QAAS,kBAAM,EAAKC,QAAQ,UAApC,aAHF,OAKE,4BAAQD,QAAS,kBAAM,EAAKC,SAAQ,KAApC,kB,GAxHQC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+C,c","file":"static/js/main.b2bda146.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { get } from \"lodash\";\r\nimport \"./styles.css\";\r\n\r\nfunction CityWeather({ data, name = \"\" }) {\r\n  const minTemp = get(data, \"DailyForecasts[0].Temperature.Minimum.Value\", 0);\r\n  const maxTemp = get(data, \"DailyForecasts[0].Temperature.Maximum.Value\", 0);\r\n\r\n  const extremeTemp = Math.abs(minTemp) > Math.abs(maxTemp) ? minTemp : maxTemp;\r\n  const isBelowZero = extremeTemp < 0;\r\n  const intensity = ((Math.abs(extremeTemp) * 100) / 40 / 100).toFixed(2);\r\n\r\n  const backdropStyle = {\r\n    opacity: intensity\r\n  };\r\n\r\n  return (\r\n    <div className=\"city-weather\">\r\n      <div\r\n        className={`weather-backdrop gamma-${isBelowZero ? \"cold\" : \"hot\"}`}\r\n        style={backdropStyle}\r\n      />\r\n      <div\r\n        className={`weather-backdrop flipped gamma-${\r\n          isBelowZero ? \"cold\" : \"hot\"\r\n        }`}\r\n        style={backdropStyle}\r\n      />\r\n      {data && (\r\n        <section className=\"weather-content\">\r\n          <div className=\"city-name\">{name}</div>\r\n          <div className=\"city-temperature\">{extremeTemp}Â°</div>\r\n          <div className=\"city-forecast\">{data.Headline.Text}</div>\r\n        </section>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityWeather;\r\n","export default {\r\n  \"187423\": {\r\n    Headline: {\r\n      Text:\r\n        \"Thunderstorms in the area late Monday morning through Monday afternoon\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: 21.2\r\n          },\r\n          Maximum: {\r\n            Value: 24.9\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"249758\": {\r\n    Headline: {\r\n      Text: \"The heat wave will continue through Monday\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: 33.6\r\n          },\r\n          Maximum: {\r\n            Value: 42.4\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"308526\": {\r\n    Headline: {\r\n      Text: \"Very warm from Friday to Saturday\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: 21.2\r\n          },\r\n          Maximum: {\r\n            Value: 31.9\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n","export default {\r\n  \"187423\": {\r\n    Headline: {\r\n      Text: \"Snowstorms in the area\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: -21.2\r\n          },\r\n          Maximum: {\r\n            Value: -21.9\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"249758\": {\r\n    Headline: {\r\n      Text:\r\n        \"Danger of frostbite, with a chance of blizzard. Consider to stay home near the fireplace.\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: -33.6\r\n          },\r\n          Maximum: {\r\n            Value: -42.4\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"308526\": {\r\n    Headline: {\r\n      Text: \"Mostly sunny and moderately chilly\"\r\n    },\r\n    DailyForecasts: [\r\n      {\r\n        Temperature: {\r\n          Minimum: {\r\n            Value: -11.2\r\n          },\r\n          Maximum: {\r\n            Value: -16.9\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./App.css\";\r\nimport CityWeather from \"./Components/CityWeather\";\r\nimport DemoHot from \"./DemoData/hot\";\r\nimport DemoCold from \"./DemoData/cold\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      userName: \"Jamie\",\r\n      cities: [\r\n        { name: \"Amsterdam\", id: 249758 },\r\n        { name: \"Madrid\", id: 308526 },\r\n        { name: \"Budapest\", id: 187423 }\r\n      ],\r\n      isWeatherLoading: false,\r\n      weatherData: {},\r\n      demoMode: false\r\n    };\r\n  }\r\n\r\n  statics = {\r\n    weatherEndpoint:\r\n      \"https://dataservice.accuweather.com/forecasts/v1/daily/1day/\",\r\n    weatherParams: {\r\n      apikey: \"aGrPwpwrDSfTi0dL9yrpLhcSQ6eOLQIi\",\r\n      metric: true\r\n    }\r\n  };\r\n\r\n  getForecasts = async cities => {\r\n    this.setState({\r\n      isWeatherLoading: true,\r\n      weatherData: {}\r\n    });\r\n\r\n    const requests = cities.map(({ id }) => {\r\n      return this.getCityForecast(id);\r\n    });\r\n\r\n    await Promise.all(requests)\r\n      .then(() => {\r\n        this.setState({\r\n          isWeatherLoading: false\r\n        });\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"Request failed\", error);\r\n      });\r\n  };\r\n\r\n  getCityForecast(cityKey) {\r\n    const { weatherEndpoint, weatherParams } = this.statics;\r\n    const cached = localStorage.getItem(`weather_${cityKey}`);\r\n\r\n    if (cached !== null) {\r\n      const weatherData = JSON.parse(cached);\r\n      this.setState(() => {\r\n        return { weatherData };\r\n      });\r\n      return weatherData;\r\n    } else {\r\n      return fetch(\r\n        `${weatherEndpoint}${cityKey}?${new URLSearchParams(weatherParams)}`,\r\n        {\r\n          method: \"GET\"\r\n        }\r\n      )\r\n        .then(response => response.json())\r\n        .then(response => {\r\n          this.setCityForecast(cityKey, response);\r\n        });\r\n    }\r\n  }\r\n\r\n  setCityForecast(cityKey, payload) {\r\n    const weatherData = this.state.weatherData;\r\n    weatherData[cityKey] = { ...payload, TimeStamp: moment() };\r\n    this.setState(() => {\r\n      return { weatherData };\r\n    });\r\n    localStorage.setItem(`weather_${cityKey}`, JSON.stringify(weatherData));\r\n  }\r\n\r\n  getWeatherData() {\r\n    if (this.state.demoMode === \"hot\") return DemoHot;\r\n    if (this.state.demoMode === \"cold\") return DemoCold;\r\n    else return this.state.weatherData;\r\n  }\r\n\r\n  setDemo(mode) {\r\n    this.setState({\r\n      demoMode: mode\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { cities } = this.state;\r\n    this.getForecasts(cities);\r\n  }\r\n\r\n  render() {\r\n    const { userName, cities } = this.state;\r\n    const weatherData = this.getWeatherData();\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"app-header\">\r\n          <p>\r\n            Hello, <span className=\"username\">{userName}</span>.\r\n            <br />\r\n            Here's what mother nature has got for us:\r\n          </p>\r\n        </header>\r\n        <section className=\"app-body\">\r\n          {cities.map(({ name, id }) => (\r\n            <CityWeather key={id} name={name} data={weatherData[id]} />\r\n          ))}\r\n        </section>\r\n        <section className=\"app-footer\">\r\n          <button onClick={() => this.setDemo(\"hot\")}>Demo hot</button>\r\n          &nbsp;\r\n          <button onClick={() => this.setDemo(\"cold\")}>Demo cold</button>\r\n          &nbsp;\r\n          <button onClick={() => this.setDemo(false)}>Demo off</button>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}